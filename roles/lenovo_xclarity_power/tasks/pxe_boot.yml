---
- name: Get current boot settings
  ansible.builtin.uri:
    url: "https://{{ bmc_hostname }}{{ systems_endpoint }}"
    method: GET
    user: "{{ bmc_username }}"
    password: "{{ bmc_password }}"
    validate_certs: "{{ bmc_validate_certs }}"
    force_basic_auth: "{{ bmc_force_basic_auth }}"
    timeout: "{{ bmc_timeout }}"
    status_code: 200
  register: current_boot_settings
  tags: [pxe, boot]

- name: Display current boot settings
  ansible.builtin.debug:
    msg: 
      - "Boot source override: {{ current_boot_settings.json.Boot.BootSourceOverrideTarget | default('None') }}"
      - "Boot source override enabled: {{ current_boot_settings.json.Boot.BootSourceOverrideEnabled | default('Disabled') }}"
  when: current_boot_settings is defined
  tags: [pxe, boot]

- name: Enable one-time PXE boot
  ansible.builtin.uri:
    url: "https://{{ bmc_hostname }}{{ systems_endpoint }}"
    method: PATCH
    user: "{{ bmc_username }}"
    password: "{{ bmc_password }}"
    validate_certs: "{{ bmc_validate_certs }}"
    force_basic_auth: "{{ bmc_force_basic_auth }}"
    timeout: "{{ bmc_timeout }}"
    body_format: json
    body:
      Boot:
        BootSourceOverrideTarget: "Pxe"
        BootSourceOverrideEnabled: "Once"
    status_code: [200, 202, 204]
  register: pxe_boot_result
  tags: [pxe, boot]

- name: Verify PXE boot configuration
  ansible.builtin.uri:
    url: "https://{{ bmc_hostname }}{{ systems_endpoint }}"
    method: GET
    user: "{{ bmc_username }}"
    password: "{{ bmc_password }}"
    validate_certs: "{{ bmc_validate_certs }}"
    force_basic_auth: "{{ bmc_force_basic_auth }}"
    timeout: "{{ bmc_timeout }}"
    status_code: 200
  register: verify_boot_settings
  when: pxe_boot_result is succeeded
  tags: [pxe, boot]

- name: Display updated boot settings
  ansible.builtin.debug:
    msg: 
      - "PXE boot successfully configured for next boot"
      - "Boot source override: {{ verify_boot_settings.json.Boot.BootSourceOverrideTarget }}"
      - "Boot source override enabled: {{ verify_boot_settings.json.Boot.BootSourceOverrideEnabled }}"
  when: verify_boot_settings is defined
  tags: [pxe, boot]

- name: Power on system to boot from PXE (system is currently off)
  ansible.builtin.uri:
    url: "https://{{ bmc_hostname }}{{ systems_endpoint }}/Actions/ComputerSystem.Reset"
    method: POST
    user: "{{ bmc_username }}"
    password: "{{ bmc_password }}"
    validate_certs: "{{ bmc_validate_certs }}"
    force_basic_auth: "{{ bmc_force_basic_auth }}"
    timeout: "{{ bmc_timeout }}"
    body_format: json
    body:
      ResetType: "{{ reset_types.on }}"
    status_code: [200, 202, 204]
  when: pxe_boot_result is succeeded and power_status.json.PowerState != "On"
  register: pxe_power_on_result
  tags: [pxe, boot, power_on]

- name: Reset system to boot from PXE (system is currently on)
  ansible.builtin.uri:
    url: "https://{{ bmc_hostname }}{{ systems_endpoint }}/Actions/ComputerSystem.Reset"
    method: POST
    user: "{{ bmc_username }}"
    password: "{{ bmc_password }}"
    validate_certs: "{{ bmc_validate_certs }}"
    force_basic_auth: "{{ bmc_force_basic_auth }}"
    timeout: "{{ bmc_timeout }}"
    body_format: json
    body:
      ResetType: "{{ reset_types.reset }}"
    status_code: [200, 202, 204]
  when: pxe_boot_result is succeeded and power_status.json.PowerState == "On"
  register: pxe_reset_result
  tags: [pxe, boot, reset]

- name: Display PXE power on notification
  ansible.builtin.debug:
    msg: "System powered on to boot from PXE network (system was previously off)"
  when: pxe_power_on_result is defined and pxe_power_on_result is succeeded and power_status.json.PowerState != "On"
  tags: [pxe, boot, power_on]

- name: Display PXE reset notification
  ansible.builtin.debug:
    msg: "System reset initiated to boot from PXE network (system was previously on)"
  when: pxe_reset_result is defined and pxe_reset_result is succeeded and power_status.json.PowerState == "On"
  tags: [pxe, boot, reset]

- name: Monitor power state after PXE operations
  ansible.builtin.uri:
    url: "https://{{ bmc_hostname }}{{ systems_endpoint }}"
    method: GET
    user: "{{ bmc_username }}"
    password: "{{ bmc_password }}"
    validate_certs: "{{ bmc_validate_certs }}"
    force_basic_auth: "{{ bmc_force_basic_auth }}"
    timeout: "{{ bmc_timeout }}"
    status_code: 200
  register: final_power_status
  until: final_power_status.json.PowerState == 'On'
  retries: "{{ power_monitoring_retries }}"
  delay: "{{ power_monitoring_delay }}"
  when: (pxe_power_on_result is defined and pxe_power_on_result is succeeded) or (pxe_reset_result is defined and pxe_reset_result is succeeded)
  tags: [pxe, power] 