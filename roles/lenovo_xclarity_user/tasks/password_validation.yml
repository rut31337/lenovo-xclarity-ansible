---
- name: Validate password length
  ansible.builtin.fail:
    msg: "Password must be between {{ password_min_length }} and {{ password_max_length }} characters long (current length: {{ target_password | length }})"
  when: target_password | length < password_min_length or target_password | length > password_max_length
  tags: [always, validation]

- name: Validate password contains allowed characters only
  ansible.builtin.fail:
    msg: "Password contains invalid characters. Only A-Z, a-z, 0-9, and ~`!@#$%^&*()-+={}[]|:;\"'<>,?/._ are allowed"
  when: not (target_password | regex_search('^[A-Za-z0-9~`!@#$%^&*()\\-+={}\\[\\]|:;"\'<>,?/._]+$'))
  tags: [always, validation]

- name: Validate password contains at least one letter
  ansible.builtin.fail:
    msg: "Password must contain at least one letter (A-Z or a-z)"
  when: not (target_password | regex_search('[A-Za-z]'))
  tags: [always, validation]

- name: Validate password contains at least one number
  ansible.builtin.fail:
    msg: "Password must contain at least one number (0-9)"
  when: not (target_password | regex_search('[0-9]'))
  tags: [always, validation]

- name: Check password complexity requirements
  ansible.builtin.set_fact:
    has_uppercase: "{{ (target_password | regex_search('[A-Z]')) is not none }}"
    has_lowercase: "{{ (target_password | regex_search('[a-z]')) is not none }}"
    has_special: "{{ (target_password | regex_search('[~`!@#$%^&*()\\-+={}\\[\\]|:;<>,?/._]')) is not none }}"
  tags: [always, validation]

- name: Calculate complexity score
  ansible.builtin.set_fact:
    complexity_count: "{{ (has_uppercase | bool | int) + (has_lowercase | bool | int) + (has_special | bool | int) }}"
  tags: [always, validation]

- name: Validate password has sufficient character types
  ansible.builtin.fail:
    msg: "Password must contain at least {{ password_complexity_types_required }} of: uppercase letter, lowercase letter, or special character. Found {{ complexity_count }}/3 types"
  when: complexity_count | int < password_complexity_types_required
  tags: [always, validation]

- name: Validate password has no more than 2 consecutive identical characters
  ansible.builtin.fail:
    msg: "Password cannot have more than 2 consecutive identical characters"
  when: target_password | regex_search('(.)\\1{2}')
  tags: [always, validation]

- name: Validate password is not same as username
  ansible.builtin.fail:
    msg: "Password cannot be the same as username (case-insensitive)"
  when: target_password | lower == target_username | lower
  tags: [always, validation]

- name: Create reversed username for validation
  ansible.builtin.set_fact:
    reversed_username: "{{ target_username[::-1] }}"
  tags: [always, validation]

- name: Validate password is not reverse of username
  ansible.builtin.fail:
    msg: "Password cannot be the reverse of username (case-insensitive)"
  when: target_password | lower == reversed_username | lower
  tags: [always, validation] 