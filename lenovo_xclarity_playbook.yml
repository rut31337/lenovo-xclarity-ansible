---
- name: Manage Lenovo XClarity BMC Controller
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    # BMC connection variables (passed as extra vars)
    bmc_host: "{{ bmc_host | mandatory }}"
    bmc_user: "{{ bmc_username | mandatory }}"
    bmc_password: "{{ bmc_password | mandatory }}"
    
    # Power management options
    power_action: "{{ action | default('status') }}"  # status, on, off, reset
    
    # PXE boot settings
    enable_pxe_boot: "{{ pxe_boot | default(false) }}"
    auto_reset_after_pxe: "{{ auto_reset_pxe | default(false) }}"
    
  tasks:
    - name: Check BMC connectivity
      uri:
        url: "https://{{ bmc_host }}/redfish/v1/"
        method: GET
        user: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 200
      register: bmc_connectivity
      tags: [always, connectivity]

    - name: Display BMC information
      debug:
        msg: "Successfully connected to BMC at {{ bmc_host }}"
      when: bmc_connectivity.status == 200
      tags: [always, connectivity]

    - name: Exit with error if both auto_reset_after_pxe and power_action are set
      block:
        - name: Display configuration error message
          debug:
            msg: "ERROR: Cannot specify both auto_reset_after_pxe and power_action. When auto_reset_after_pxe is enabled, the system will automatically reset after PXE configuration. Please set power_action to 'status' or leave it undefined."
        - name: End playbook execution with error
          meta: end_play
      when: (auto_reset_after_pxe | bool) and power_action is defined and power_action != 'status'
      tags: [always, validation]

    - name: Get current power state
      uri:
        url: "https://{{ bmc_host }}/redfish/v1/Systems/1"
        method: GET
        user: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 200
      register: power_status
      tags: [always, power]

    - name: Display current power state
      debug:
        msg: "Current power state: {{ power_status.json.PowerState }}"
      tags: [always, power]

    - name: Exit gracefully if system is already in desired power state
      block:
        - name: Display graceful exit message
          debug:
            msg: "System is already in the desired state '{{ power_status.json.PowerState }}' for action '{{ power_action }}'. Exiting gracefully."
        - name: End playbook execution
          meta: end_play
      when: >
        (power_action == 'on' and power_status.json.PowerState == 'On') or
        (power_action in ['off', 'force_off'] and power_status.json.PowerState == 'Off')
      tags: [always, power]

    - name: Exit gracefully if reset requested on powered off system
      block:
        - name: Display reset on off system message
          debug:
            msg: "Cannot reset system that is currently '{{ power_status.json.PowerState }}'. System must be powered on before it can be reset. Use power_action 'on' to power on the system first."
        - name: End playbook execution
          meta: end_play
      when: power_action == 'reset' and power_status.json.PowerState != 'On'
      tags: [always, power]

    - name: Power on the system
      uri:
        url: "https://{{ bmc_host }}/redfish/v1/Systems/1/Actions/ComputerSystem.Reset"
        method: POST
        user: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          ResetType: "On"
        status_code: [200, 202, 204]
      when: power_action == "on" and power_status.json.PowerState != "On" and not (auto_reset_after_pxe | bool)
      register: power_on_result
      tags: [power, power_on]

    - name: Power off the system (graceful)
      uri:
        url: "https://{{ bmc_host }}/redfish/v1/Systems/1/Actions/ComputerSystem.Reset"
        method: POST
        user: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          ResetType: "GracefulShutdown"
        status_code: [200, 202, 204]
      when: power_action == "off" and power_status.json.PowerState == "On" and not (auto_reset_after_pxe | bool)
      register: power_off_result
      tags: [power, power_off]

    - name: Force power off the system
      uri:
        url: "https://{{ bmc_host }}/redfish/v1/Systems/1/Actions/ComputerSystem.Reset"
        method: POST
        user: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          ResetType: "ForceOff"
        status_code: [200, 202, 204]
      when: power_action == "force_off" and power_status.json.PowerState == "On" and not (auto_reset_after_pxe | bool)
      register: force_power_off_result
      tags: [power, force_power_off]

    - name: Reset the system
      uri:
        url: "https://{{ bmc_host }}/redfish/v1/Systems/1/Actions/ComputerSystem.Reset"
        method: POST
        user: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          ResetType: "ForceRestart"
        status_code: [200, 202, 204]
      when: power_action == "reset" and not (auto_reset_after_pxe | bool)
      register: reset_result
      tags: [power, reset]

    - name: Get current boot settings
      uri:
        url: "https://{{ bmc_host }}/redfish/v1/Systems/1"
        method: GET
        user: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 200
      register: current_boot_settings
      when: (enable_pxe_boot | bool) or (auto_reset_after_pxe | bool)
      tags: [pxe, boot]

    - name: Display current boot settings
      debug:
        msg: 
          - "Boot source override: {{ current_boot_settings.json.Boot.BootSourceOverrideTarget | default('None') }}"
          - "Boot source override enabled: {{ current_boot_settings.json.Boot.BootSourceOverrideEnabled | default('Disabled') }}"
      when: ((enable_pxe_boot | bool) or (auto_reset_after_pxe | bool)) and current_boot_settings is defined
      tags: [pxe, boot]

    - name: Enable one-time PXE boot
      uri:
        url: "https://{{ bmc_host }}/redfish/v1/Systems/1"
        method: PATCH
        user: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          Boot:
            BootSourceOverrideTarget: "Pxe"
            BootSourceOverrideEnabled: "Once"
        status_code: [200, 202, 204]
      when: (enable_pxe_boot | bool) or (auto_reset_after_pxe | bool)
      register: pxe_boot_result
      tags: [pxe, boot]

    - name: Verify PXE boot configuration
      uri:
        url: "https://{{ bmc_host }}/redfish/v1/Systems/1"
        method: GET
        user: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 200
      register: verify_boot_settings
      when: ((enable_pxe_boot | bool) or (auto_reset_after_pxe | bool)) and pxe_boot_result is succeeded
      tags: [pxe, boot]

    - name: Display updated boot settings
      debug:
        msg: 
          - "PXE boot successfully configured for next boot"
          - "Boot source override: {{ verify_boot_settings.json.Boot.BootSourceOverrideTarget }}"
          - "Boot source override enabled: {{ verify_boot_settings.json.Boot.BootSourceOverrideEnabled }}"
      when: ((enable_pxe_boot | bool) or (auto_reset_after_pxe | bool)) and verify_boot_settings is defined
      tags: [pxe, boot]

    - name: Power on system to boot from PXE (system is currently off)
      uri:
        url: "https://{{ bmc_host }}/redfish/v1/Systems/1/Actions/ComputerSystem.Reset"
        method: POST
        user: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          ResetType: "On"
        status_code: [200, 202, 204]
      when: ((enable_pxe_boot | bool) or (auto_reset_after_pxe | bool)) and auto_reset_after_pxe | bool and pxe_boot_result is succeeded and power_status.json.PowerState != "On"
      register: pxe_power_on_result
      tags: [pxe, boot, power_on]

    - name: Reset system to boot from PXE (system is currently on)
      uri:
        url: "https://{{ bmc_host }}/redfish/v1/Systems/1/Actions/ComputerSystem.Reset"
        method: POST
        user: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          ResetType: "ForceRestart"
        status_code: [200, 202, 204]
      when: ((enable_pxe_boot | bool) or (auto_reset_after_pxe | bool)) and auto_reset_after_pxe | bool and pxe_boot_result is succeeded and power_status.json.PowerState == "On"
      register: pxe_reset_result
      tags: [pxe, boot, reset]

    - name: Display PXE power on notification
      debug:
        msg: "System powered on to boot from PXE network (system was previously off)"
      when: ((enable_pxe_boot | bool) or (auto_reset_after_pxe | bool)) and auto_reset_after_pxe | bool and pxe_power_on_result is defined and pxe_power_on_result is succeeded
      tags: [pxe, boot, power_on]

    - name: Display PXE reset notification
      debug:
        msg: "System reset initiated to boot from PXE network (system was previously on)"
      when: ((enable_pxe_boot | bool) or (auto_reset_after_pxe | bool)) and auto_reset_after_pxe | bool and pxe_reset_result is defined and pxe_reset_result is succeeded
      tags: [pxe, boot, reset]

    - name: Display power action result
      debug:
        msg: "Power action '{{ power_action }}' completed successfully"
      when: power_action in ['on', 'off', 'force_off', 'reset'] and 
            (power_on_result is succeeded or power_off_result is succeeded or 
             force_power_off_result is succeeded or reset_result is succeeded)
      tags: [power]

    - name: Monitor power state until desired state is reached
      uri:
        url: "https://{{ bmc_host }}/redfish/v1/Systems/1"
        method: GET
        user: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 200
      register: final_power_status
      until: >
        (power_action == 'on' and final_power_status.json.PowerState == 'On') or
        (power_action in ['off', 'force_off'] and final_power_status.json.PowerState == 'Off') or
        (power_action == 'reset' and final_power_status.json.PowerState == 'On') or
        (((enable_pxe_boot | bool) or (auto_reset_after_pxe | bool)) and auto_reset_after_pxe | bool and 
         ((pxe_reset_result is defined and pxe_reset_result is succeeded) or (pxe_power_on_result is defined and pxe_power_on_result is succeeded)) and 
         final_power_status.json.PowerState == 'On') or
        (power_action == 'status' or power_action is not defined)
      retries: 30
      delay: 5
      when: power_action in ['on', 'off', 'force_off', 'reset'] or (((enable_pxe_boot | bool) or (auto_reset_after_pxe | bool)) and auto_reset_after_pxe | bool and ((pxe_reset_result is defined and pxe_reset_result is succeeded) or (pxe_power_on_result is defined and pxe_power_on_result is succeeded)))
      tags: [always, power]

    - name: Get final power state (if no monitoring was needed)
      uri:
        url: "https://{{ bmc_host }}/redfish/v1/Systems/1"
        method: GET
        user: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 200
      register: final_power_status_no_monitoring
      when: not (power_action in ['on', 'off', 'force_off', 'reset'] or (((enable_pxe_boot | bool) or (auto_reset_after_pxe | bool)) and auto_reset_after_pxe | bool and ((pxe_reset_result is defined and pxe_reset_result is succeeded) or (pxe_power_on_result is defined and pxe_power_on_result is succeeded))))
      tags: [always, power]

    - name: Display final power state (from monitoring)
      debug:
        msg: "Final power state: {{ final_power_status.json.PowerState }}"
      when: final_power_status is defined and (power_action in ['on', 'off', 'force_off', 'reset'] or (((enable_pxe_boot | bool) or (auto_reset_after_pxe | bool)) and auto_reset_after_pxe | bool and ((pxe_reset_result is defined and pxe_reset_result is succeeded) or (pxe_power_on_result is defined and pxe_power_on_result is succeeded))))
      tags: [always, power]

    - name: Display final power state (no monitoring)
      debug:
        msg: "Final power state: {{ final_power_status_no_monitoring.json.PowerState }}"
      when: final_power_status_no_monitoring is defined and not (power_action in ['on', 'off', 'force_off', 'reset'] or (((enable_pxe_boot | bool) or (auto_reset_after_pxe | bool)) and auto_reset_after_pxe | bool and ((pxe_reset_result is defined and pxe_reset_result is succeeded) or (pxe_power_on_result is defined and pxe_power_on_result is succeeded))))
      tags: [always, power] 