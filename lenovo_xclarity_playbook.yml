---
- name: Manage Lenovo XClarity BMC Controller
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    # BMC connection variables (passed as extra vars)
    _bmc_hostname: "{{ bmc_hostname | mandatory }}"
    _bmc_username: "{{ bmc_username | mandatory }}"
    _bmc_password: "{{ bmc_password | mandatory }}"
    
    # Power management options
    _power_action: "{{ power_action | default('status') }}"  # status, on, off, reset
    
    # PXE boot settings
    _enable_pxe_boot_and_reset: "{{ enable_pxe_boot_and_reset | default(false) }}"
    
  tasks:
    - name: Check BMC connectivity
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}/redfish/v1/"
        method: GET
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 200
      register: bmc_connectivity
      tags: [always, connectivity]

    - name: Display BMC information
      ansible.builtin.debug:
        msg: "Successfully connected to BMC at {{ _bmc_hostname }}"
      when: bmc_connectivity.status == 200
      tags: [always, connectivity]

    - name: Exit with error if both _enable_pxe_boot_and_reset and _power_action are set
      block:
        - name: Display configuration error message
          ansible.builtin.debug:
            msg: "ERROR: Cannot specify both enable_pxe_boot_and_reset and power_action. When enable_pxe_boot_and_reset is enabled, the system will automatically reset after PXE configuration."
        - name: End playbook execution with error
          ansible.builtin.meta: end_play
      when: (_enable_pxe_boot_and_reset | bool) and _power_action is defined and _power_action != 'status'
      tags: [always, validation]

    - name: Get current power state
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}/redfish/v1/Systems/1"
        method: GET
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 200
      register: power_status
      tags: [always, power]

    - name: Display current power state
      ansible.builtin.debug:
        msg: "Current power state: {{ power_status.json.PowerState }}"
      tags: [always, power]

    - name: Exit gracefully if system is already in desired power state
      block:
        - name: Display graceful exit message
          ansible.builtin.debug:
            msg: "System is already in the desired state '{{ power_status.json.PowerState }}' for action '{{ _power_action }}'. Exiting gracefully."
        - name: End playbook execution
          ansible.builtin.meta: end_play
      when: >
        (_power_action == 'on' and power_status.json.PowerState == 'On') or
        (_power_action in ['off', 'force_off'] and power_status.json.PowerState == 'Off')
      tags: [always, power]

    - name: Exit gracefully if reset requested on powered off system
      block:
        - name: Display reset on off system message
          ansible.builtin.debug:
            msg: "Cannot reset system that is currently '{{ power_status.json.PowerState }}'. System must be powered on before it can be reset. Use power_action 'on' to power on the system first."
        - name: End playbook execution
          ansible.builtin.meta: end_play
      when: _power_action == 'reset' and power_status.json.PowerState != 'On'
      tags: [always, power]

    - name: Power on the system
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}/redfish/v1/Systems/1/Actions/ComputerSystem.Reset"
        method: POST
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          ResetType: "On"
        status_code: [200, 202, 204]
      when: _power_action == "on" and power_status.json.PowerState != "On" and not (_enable_pxe_boot_and_reset | bool)
      register: power_on_result
      tags: [power, power_on]

    - name: Power off the system (graceful)
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}/redfish/v1/Systems/1/Actions/ComputerSystem.Reset"
        method: POST
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          ResetType: "GracefulShutdown"
        status_code: [200, 202, 204]
      when: _power_action == "off" and power_status.json.PowerState == "On" and not (_enable_pxe_boot_and_reset | bool)
      register: power_off_result
      tags: [power, power_off]

    - name: Force power off the system
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}/redfish/v1/Systems/1/Actions/ComputerSystem.Reset"
        method: POST
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          ResetType: "ForceOff"
        status_code: [200, 202, 204]
      when: _power_action == "force_off" and power_status.json.PowerState == "On" and not (_enable_pxe_boot_and_reset | bool)
      register: force_power_off_result
      tags: [power, force_power_off]

    - name: Reset the system
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}/redfish/v1/Systems/1/Actions/ComputerSystem.Reset"
        method: POST
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          ResetType: "ForceRestart"
        status_code: [200, 202, 204]
      when: _power_action == "reset" and not (_enable_pxe_boot_and_reset | bool)
      register: reset_result
      tags: [power, reset]

    - name: Get current boot settings
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}/redfish/v1/Systems/1"
        method: GET
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 200
      register: current_boot_settings
      when: (_enable_pxe_boot_and_reset | bool)
      tags: [pxe, boot]

    - name: Display current boot settings
      ansible.builtin.debug:
        msg: 
          - "Boot source override: {{ current_boot_settings.json.Boot.BootSourceOverrideTarget | default('None') }}"
          - "Boot source override enabled: {{ current_boot_settings.json.Boot.BootSourceOverrideEnabled | default('Disabled') }}"
      when: (_enable_pxe_boot_and_reset | bool) and current_boot_settings is defined
      tags: [pxe, boot]

    - name: Enable one-time PXE boot
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}/redfish/v1/Systems/1"
        method: PATCH
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          Boot:
            BootSourceOverrideTarget: "Pxe"
            BootSourceOverrideEnabled: "Once"
        status_code: [200, 202, 204]
      when: (_enable_pxe_boot_and_reset | bool)
      register: pxe_boot_result
      tags: [pxe, boot]

    - name: Verify PXE boot configuration
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}/redfish/v1/Systems/1"
        method: GET
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 200
      register: verify_boot_settings
      when: (_enable_pxe_boot_and_reset | bool) and pxe_boot_result is succeeded
      tags: [pxe, boot]

    - name: Display updated boot settings
      ansible.builtin.debug:
        msg: 
          - "PXE boot successfully configured for next boot"
          - "Boot source override: {{ verify_boot_settings.json.Boot.BootSourceOverrideTarget }}"
          - "Boot source override enabled: {{ verify_boot_settings.json.Boot.BootSourceOverrideEnabled }}"
      when: (_enable_pxe_boot_and_reset | bool) and verify_boot_settings is defined
      tags: [pxe, boot]

    - name: Power on system to boot from PXE (system is currently off)
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}/redfish/v1/Systems/1/Actions/ComputerSystem.Reset"
        method: POST
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          ResetType: "On"
        status_code: [200, 202, 204]
      when: (_enable_pxe_boot_and_reset | bool) and pxe_boot_result is succeeded and power_status.json.PowerState != "On"
      register: pxe_power_on_result
      tags: [pxe, boot, power_on]

    - name: Reset system to boot from PXE (system is currently on)
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}/redfish/v1/Systems/1/Actions/ComputerSystem.Reset"
        method: POST
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          ResetType: "ForceRestart"
        status_code: [200, 202, 204]
      when: (_enable_pxe_boot_and_reset | bool) and pxe_boot_result is succeeded and power_status.json.PowerState == "On"
      register: pxe_reset_result
      tags: [pxe, boot, reset]

    - name: Display PXE power on notification
      ansible.builtin.debug:
        msg: "System powered on to boot from PXE network (system was previously off)"
      when: (_enable_pxe_boot_and_reset | bool) and pxe_power_on_result is defined and pxe_power_on_result is succeeded and power_status.json.PowerState != "On"
      tags: [pxe, boot, power_on]

    - name: Display PXE reset notification
      ansible.builtin.debug:
        msg: "System reset initiated to boot from PXE network (system was previously on)"
      when: (_enable_pxe_boot_and_reset | bool) and pxe_reset_result is defined and pxe_reset_result is succeeded and power_status.json.PowerState == "On"
      tags: [pxe, boot, reset]

    - name: Display power action result
      ansible.builtin.debug:
        msg: "Power action '{{ _power_action }}' completed successfully"
      when: _power_action in ['on', 'off', 'force_off', 'reset'] and 
            (power_on_result is succeeded or power_off_result is succeeded or 
             force_power_off_result is succeeded or reset_result is succeeded)
      tags: [power]

    - name: Update power state after PXE power operations
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}/redfish/v1/Systems/1"
        method: GET
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 200
      register: updated_power_status_after_pxe
      when: (_enable_pxe_boot_and_reset | bool) and ((pxe_power_on_result is defined and pxe_power_on_result is succeeded) or (pxe_reset_result is defined and pxe_reset_result is succeeded))
      tags: [always, power, pxe]

    - name: Monitor power state until desired state is reached
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}/redfish/v1/Systems/1"
        method: GET
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 200
      register: final_power_status
      until: >
        (_power_action == 'on' and final_power_status.json.PowerState == 'On') or
        (_power_action in ['off', 'force_off'] and final_power_status.json.PowerState == 'Off') or
        (_power_action == 'reset' and final_power_status.json.PowerState == 'On') or
        ((_enable_pxe_boot_and_reset | bool) and 
         ((pxe_reset_result is defined and pxe_reset_result is succeeded) or (pxe_power_on_result is defined and pxe_power_on_result is succeeded)) and 
         final_power_status.json.PowerState == 'On') or
        (_power_action == 'status' or _power_action is not defined)
      retries: 30
      delay: 5
      when: _power_action in ['on', 'off', 'force_off', 'reset'] or ((_enable_pxe_boot_and_reset | bool) and ((pxe_reset_result is defined and pxe_reset_result is succeeded) or (pxe_power_on_result is defined and pxe_power_on_result is succeeded)))
      tags: [always, power]

    - name: Get final power state (if no monitoring was needed)
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}/redfish/v1/Systems/1"
        method: GET
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 200
      register: final_power_status_no_monitoring
      when: not (_power_action in ['on', 'off', 'force_off', 'reset'] or ((_enable_pxe_boot_and_reset | bool) and ((pxe_reset_result is defined and pxe_reset_result is succeeded) or (pxe_power_on_result is defined and pxe_power_on_result is succeeded))))
      tags: [always, power]

    - name: Display final power state (from monitoring)
      ansible.builtin.debug:
        msg: "Final power state: {{ final_power_status.json.PowerState }}"
      when: final_power_status is defined and (_power_action in ['on', 'off', 'force_off', 'reset'] or ((_enable_pxe_boot_and_reset | bool) and ((pxe_reset_result is defined and pxe_reset_result is succeeded) or (pxe_power_on_result is defined and pxe_power_on_result is succeeded))))
      tags: [always, power]

    - name: Display final power state (after PXE operations - no monitoring)
      ansible.builtin.debug:
        msg: "Final power state: {{ updated_power_status_after_pxe.json.PowerState }}"
      when: updated_power_status_after_pxe is defined and final_power_status is not defined and ((_enable_pxe_boot_and_reset | bool) and ((pxe_reset_result is defined and pxe_reset_result is succeeded) or (pxe_power_on_result is defined and pxe_power_on_result is succeeded)))
      tags: [always, power]

    - name: Display final power state (no monitoring)
      ansible.builtin.debug:
        msg: "Final power state: {{ final_power_status_no_monitoring.json.PowerState }}"
      when: final_power_status_no_monitoring is defined and not (_power_action in ['on', 'off', 'force_off', 'reset'] or ((_enable_pxe_boot_and_reset | bool) and ((pxe_reset_result is defined and pxe_reset_result is succeeded) or (pxe_power_on_result is defined and pxe_power_on_result is succeeded))))
      tags: [always, power] 
