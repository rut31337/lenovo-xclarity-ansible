---
- name: Manage Lenovo XClarity BMC Users
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    # BMC connection variables (passed as extra vars)
    _bmc_hostname: "{{ bmc_hostname | mandatory }}"
    _bmc_username: "{{ bmc_username | mandatory }}"
    _bmc_password: "{{ bmc_password | mandatory }}"
    
    # User management variables
    _target_username: "{{ target_username | mandatory }}"
    _target_password: "{{ target_password | mandatory }}"
    _user_action: "{{ user_action | default('status') }}"  # create, update_password, status
    _user_role: "{{ user_role | default('ReadOnly') }}"  # Administrator, Operator, ReadOnly, PowerUser
    _enable_user: "{{ enable_user | default(true) }}"
    
  tasks:
    - name: Validate user action parameter
      ansible.builtin.fail:
        msg: "Invalid user_action. Must be one of: create, update_password, delete, status"
      when: _user_action not in ['create', 'update_password', 'delete', 'status']
      tags: [always, validation]

    - name: Validate user role parameter
      ansible.builtin.fail:
        msg: "Invalid user_role. Must be one of: Administrator, Operator, ReadOnly, PowerUser"
      when: _user_role not in ['Administrator', 'Operator', 'ReadOnly', 'PowerUser']
      tags: [always, validation]

    - name: Validate target username is provided
      ansible.builtin.fail:
        msg: "target_username is required and cannot be empty"
      when: target_username is not defined or target_username == ""
      tags: [always, validation]

    - name: Validate target password is provided for create action
      ansible.builtin.fail:
        msg: "target_password is required and cannot be empty when user_action is 'create'"
      when: _user_action == 'create' and (target_password is not defined or target_password == "")
      tags: [always, validation]

    - name: Validate password length (10-32 characters)
      ansible.builtin.fail:
        msg: "Password must be between 10 and 32 characters long (current length: {{ _target_password | length }})"
      when: 
        - target_password is defined and target_password != ""
        - _user_action in ['create', 'update_password']
        - _target_password | length < 10 or _target_password | length > 32
      tags: [always, validation]

    - name: Validate password contains allowed characters only
      ansible.builtin.fail:
        msg: "Password contains invalid characters. Only A-Z, a-z, 0-9, and ~`!@#$%^&*()-+={}[]|:;\"'<>,?/._ are allowed"
      when: 
        - target_password is defined and target_password != ""
        - _user_action in ['create', 'update_password']
        - not (_target_password | regex_search('^[A-Za-z0-9~`!@#$%^&*()\\-+={}\\[\\]|:;"\'<>,?/._]+$'))
      tags: [always, validation]

    - name: Validate password contains at least one letter
      ansible.builtin.fail:
        msg: "Password must contain at least one letter (A-Z or a-z)"
      when: 
        - target_password is defined and target_password != ""
        - _user_action in ['create', 'update_password']
        - not (_target_password | regex_search('[A-Za-z]'))
      tags: [always, validation]

    - name: Validate password contains at least one number
      ansible.builtin.fail:
        msg: "Password must contain at least one number (0-9)"
      when: 
        - target_password is defined and target_password != ""
        - _user_action in ['create', 'update_password']
        - not (_target_password | regex_search('[0-9]'))
      tags: [always, validation]

    - name: Check password complexity requirements
      ansible.builtin.set_fact:
        has_uppercase: "{{ (_target_password | regex_search('[A-Z]')) is not none }}"
        has_lowercase: "{{ (_target_password | regex_search('[a-z]')) is not none }}"
        has_special: "{{ (_target_password | regex_search('[~`!@#$%^&*()\\-+={}\\[\\]|:;<>,?/._]')) is not none }}"
      when: 
        - target_password is defined and target_password != ""
        - _user_action in ['create', 'update_password']
      tags: [always, validation]

    - name: Debug password complexity check
      ansible.builtin.debug:
        msg: 
          - "Password complexity analysis:"
          - "Has uppercase: {{ has_uppercase | default('not checked') }}"
          - "Has lowercase: {{ has_lowercase | default('not checked') }}"
          - "Has special: {{ has_special | default('not checked') }}"
      when: 
        - target_password is defined and target_password != ""
        - _user_action in ['create', 'update_password']
        - has_uppercase is defined
      tags: [always, validation]

    - name: Calculate complexity score and validate
      ansible.builtin.set_fact:
        complexity_count: "{{ (has_uppercase | bool | int) + (has_lowercase | bool | int) + (has_special | bool | int) }}"
      when: 
        - target_password is defined and target_password != ""
        - _user_action in ['create', 'update_password']
        - has_uppercase is defined
      tags: [always, validation]

    - name: Validate password has at least 2 character types
      ansible.builtin.fail:
        msg: "Password must contain at least 2 of: uppercase letter, lowercase letter, or special character. Found {{ complexity_count }}/3 types"
      when: 
        - target_password is defined and target_password != ""
        - _user_action in ['create', 'update_password']
        - complexity_count is defined
        - complexity_count | int < 2
      tags: [always, validation]

    - name: Validate password has no more than 2 consecutive identical characters
      ansible.builtin.fail:
        msg: "Password cannot have more than 2 consecutive identical characters"
      when: 
        - target_password is defined and target_password != ""
        - _user_action in ['create', 'update_password']
        - _target_password | regex_search('(.)\\1{2}')
      tags: [always, validation]

    - name: Validate password is not same as username
      ansible.builtin.fail:
        msg: "Password cannot be the same as username (case-insensitive)"
      when: 
        - target_password is defined and target_password != ""
        - _user_action in ['create', 'update_password']
        - _target_password | lower == _target_username | lower
      tags: [always, validation]

    - name: Create reversed username for validation
      ansible.builtin.set_fact:
        reversed_username: "{{ _target_username[::-1] }}"
      when: 
        - target_password is defined and target_password != ""
        - _user_action in ['create', 'update_password']
      tags: [always, validation]

    - name: Validate password is not reverse of username
      ansible.builtin.fail:
        msg: "Password cannot be the reverse of username (case-insensitive)"
      when: 
        - target_password is defined and target_password != ""
        - _user_action in ['create', 'update_password']
        - reversed_username is defined
        - _target_password | lower == reversed_username | lower
      tags: [always, validation]

    - name: Check BMC connectivity
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}/redfish/v1/"
        method: GET
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 200
      register: bmc_connectivity
      tags: [always, connectivity]

    - name: Display BMC connection status
      ansible.builtin.debug:
        msg: "Successfully connected to BMC at {{ _bmc_hostname }}"
      when: bmc_connectivity.status == 200
      tags: [always, connectivity]

    - name: Display Redfish service information
      ansible.builtin.debug:
        msg: 
          - "Redfish Service Information:"
          - "Service Name: {{ bmc_connectivity.json.Name | default('Not specified') }}"
          - "Service ID: {{ bmc_connectivity.json.Id | default('Not specified') }}"
          - "Redfish Version: {{ bmc_connectivity.json.RedfishVersion | default('Not specified') }}"
          - "Service Version: {{ bmc_connectivity.json.ServiceVersion | default('Not specified') }}"
          - "UUID: {{ bmc_connectivity.json.UUID | default('Not specified') }}"
          - "Product: {{ bmc_connectivity.json.Product | default('Not specified') }}"
          - "Vendor: {{ bmc_connectivity.json.Vendor | default('Not specified') }}"
      when: bmc_connectivity.status == 200 and bmc_connectivity.json is defined
      tags: [always, connectivity, version]

    - name: Get current account service information
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}/redfish/v1/AccountService"
        method: GET
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 200
      register: account_service_info
      tags: [always, account_service]

    - name: Display account service information
      ansible.builtin.debug:
        msg: 
          - "Account Service ID: {{ account_service_info.json.Id }}"
          - "Max password length: {{ account_service_info.json.MaxPasswordLength | default('Not specified') }}"
          - "Min password length: {{ account_service_info.json.MinPasswordLength | default('Not specified') }}"
          - "Accounts endpoint: {{ account_service_info.json.Accounts['@odata.id'] }}"
      tags: [always, account_service]



    - name: Get current user accounts
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}{{ account_service_info.json.Accounts['@odata.id'] }}"
        method: GET
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 200
      register: user_accounts
      tags: [always, users]

    - name: Extract user account details
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}{{ item['@odata.id'] }}"
        method: GET
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 200
      register: user_details
      loop: "{{ user_accounts.json.Members }}"
      tags: [always, users]

    - name: Create user details summary
      ansible.builtin.set_fact:
        existing_users: "{{ existing_users | default([]) + [{'username': item.json.UserName, 'enabled': item.json.Enabled, 'role': item.json.RoleId, 'id': item.json.Id, 'endpoint': item.json['@odata.id']}] }}"
      loop: "{{ user_details.results }}"
      when: item.json.UserName is defined and item.json.UserName != ""
      tags: [always, users]

    - name: Display existing users
      ansible.builtin.debug:
        msg: "Existing users: {{ existing_users | default([]) }}"
      tags: [always, users]

    - name: Check if target user already exists
      ansible.builtin.set_fact:
        target_user_exists: "{{ existing_users | default([]) | selectattr('username', 'equalto', _target_username) | list | length > 0 }}"
        target_user_info: "{{ existing_users | default([]) | selectattr('username', 'equalto', _target_username) | first | default({}) }}"
      tags: [always, users]

    - name: Display target user status
      ansible.builtin.debug:
        msg: 
          - "Target user '{{ _target_username }}' exists: {{ target_user_exists }}"
          - "Target user info: {{ target_user_info }}"
      when: _user_action == 'status' or target_user_exists
      tags: [always, users, status]

    - name: Exit gracefully if only requesting user status
      ansible.builtin.meta: end_play
      when: _user_action == 'status'
      tags: [status]

    - name: Find available user slot for new user
      ansible.builtin.set_fact:
        available_user_slots: "{{ user_details.results | selectattr('json.UserName', 'undefined') + user_details.results | selectattr('json.UserName', 'equalto', '') | list }}"
      when: not target_user_exists and _user_action == 'create'
      tags: [create, users]

    - name: Fail if no available user slots for new user
      ansible.builtin.fail:
        msg: "No available user slots to create new user '{{ _target_username }}'. All user accounts are occupied."
      when: not target_user_exists and _user_action == 'create' and (available_user_slots | length == 0)
      tags: [create, users]

    - name: Fail if user doesn't exist for password update
      ansible.builtin.fail:
        msg: "User '{{ _target_username }}' does not exist. Cannot update password for non-existent user."
      when: not target_user_exists and _user_action == 'update_password'
      tags: [update_password, users]

    - name: Fail if user doesn't exist for deletion
      ansible.builtin.fail:
        msg: "User '{{ _target_username }}' does not exist. Cannot delete non-existent user."
      when: not target_user_exists and _user_action == 'delete'
      tags: [delete, users]

    - name: Create new user account
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}{{ available_user_slots[0].json['@odata.id'] }}"
        method: PATCH
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          UserName: "{{ _target_username }}"
          Password: "{{ _target_password }}"
          Enabled: "{{ _enable_user }}"
        status_code: [200, 202, 204]
      when: not target_user_exists and _user_action == 'create'
      register: create_user_result
      tags: [create, users]

    - name: Update existing user password
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}{{ target_user_info.endpoint }}"
        method: PATCH
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          Password: "{{ _target_password }}"
        status_code: [200, 202, 204]
      when: target_user_exists and _user_action == 'update_password'
      register: update_password_result
      tags: [update_password, users]

    - name: Delete existing user account
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}{{ target_user_info.endpoint }}"
        method: PATCH
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          UserName: ""
        status_code: [200, 202, 204]
      when: target_user_exists and _user_action == 'delete'
      register: delete_user_result
      tags: [delete, users]

    - name: Verify user creation
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}{{ available_user_slots[0].json['@odata.id'] }}"
        method: GET
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 200
      when: not target_user_exists and _user_action == 'create' and create_user_result is succeeded
      register: verify_user_creation
      tags: [create, users, verification]

    - name: Display user creation success
      ansible.builtin.debug:
        msg: 
          - "User '{{ _target_username }}' created successfully"
          - "Username: {{ verify_user_creation.json.UserName }}"
          - "Role: {{ verify_user_creation.json.RoleId }}"
          - "Enabled: {{ verify_user_creation.json.Enabled }}"
          - "User ID: {{ verify_user_creation.json.Id }}"
      when: not target_user_exists and _user_action == 'create' and verify_user_creation is defined and verify_user_creation is succeeded
      tags: [create, users, verification]

    - name: Verify user deletion
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}{{ target_user_info.endpoint }}"
        method: GET
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: [200, 404]
      when: target_user_exists and _user_action == 'delete' and delete_user_result is succeeded
      register: verify_user_deletion
      failed_when: false
      tags: [delete, users, verification]

    - name: Display user deletion success
      ansible.builtin.debug:
        msg: 
          - "User '{{ _target_username }}' deleted successfully"
          - "User account removed from BMC"
          - "User slot ID {{ target_user_info.id }} is now available"
          - "Verification status: {{ 'User not found (expected)' if verify_user_deletion.status == 404 else 'User slot cleared' if (verify_user_deletion.json.UserName | default('')) == '' else 'Unexpected state' }}"
      when: target_user_exists and _user_action == 'delete' and verify_user_deletion is defined
      tags: [delete, users, verification]

    - name: Display password update success
      ansible.builtin.debug:
        msg: "Password for user '{{ _target_username }}' updated successfully"
      when: target_user_exists and _user_action == 'update_password' and update_password_result is succeeded
      tags: [update_password, users]

    - name: Get user details after creation/update to find role ID
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}{{ target_user_info.endpoint if target_user_exists else available_user_slots[0].json['@odata.id'] }}"
        method: GET
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 200
      register: user_details_after_action
      when: 
        - _user_action in ['create', 'update_password']
        - ((create_user_result is defined and create_user_result is succeeded) or (update_password_result is defined and update_password_result is succeeded))
      tags: [role_management, users]

    - name: Extract account slot number for custom role
      ansible.builtin.set_fact:
        account_slot_number: "{{ (target_user_info.endpoint if target_user_exists else available_user_slots[0].json['@odata.id']) | regex_search('/(\\d+)$') | regex_replace('/', '') }}"
      when: 
        - _user_action != 'delete'
        - _user_role == "PowerUser"
        - user_details_after_action is defined
        - user_details_after_action is succeeded
      tags: [role_management, users]

    - name: Set custom role name based on account slot
      ansible.builtin.set_fact:
        custom_role_name: "CustomRole{{ account_slot_number }}"
        custom_role_endpoint: "{{ account_service_info.json.Roles['@odata.id'] }}/CustomRole{{ account_slot_number }}"
      when: 
        - _user_action != 'delete'
        - _user_role == "PowerUser"
        - account_slot_number is defined
        - account_slot_number != ""
      tags: [role_management, users]

    - name: Extract user role ID
      ansible.builtin.set_fact:
        user_role_id: "{{ user_details_after_action.json.RoleId | default('') }}"
        user_role_endpoint: "{{ user_details_after_action.json.Links.Role['@odata.id'] | default('') }}"
      when: 
        - _user_action != 'delete'
        - user_details_after_action is defined
        - user_details_after_action is succeeded
      tags: [role_management, users]

    - name: Update CustomRole with PowerUser privileges
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}{{ custom_role_endpoint }}"
        method: PATCH
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          OemPrivileges:
            - "RemoteConsoleAndVirtualMediaAccess"
            - "RemoteServerPowerRestartAccess"
        status_code: [200, 202, 204]
      when: 
        - _user_action != 'delete'
        - _user_role == "PowerUser"
        - custom_role_endpoint is defined
        - custom_role_endpoint != ""
      register: poweruser_role_update
      tags: [role_management, poweruser]

    - name: Assign user to CustomRole after PowerUser update
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}{{ target_user_info.endpoint if target_user_exists else available_user_slots[0].json['@odata.id'] }}"
        method: PATCH
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          RoleId: "{{ custom_role_name }}"
        status_code: [200, 202, 204]
      when: 
        - _user_action != 'delete'
        - _user_role == "PowerUser"
        - poweruser_role_update is defined
        - poweruser_role_update is succeeded
        - custom_role_name is defined
      register: user_role_assignment
      tags: [role_management, poweruser]

    - name: Update user's role with standard role privileges
      ansible.builtin.uri:
        url: "https://{{ _bmc_hostname }}{{ target_user_info.endpoint if target_user_exists else available_user_slots[0].json['@odata.id'] }}"
        method: PATCH
        user: "{{ _bmc_username }}"
        password: "{{ _bmc_password }}"
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          RoleId: "{{ _user_role }}"
        status_code: [200, 202, 204]
      when: 
        - _user_action != 'delete'
        - user_role_endpoint is defined
        - user_role_endpoint != ""
        - _user_role != "PowerUser" and user_role != "PowerUser"
        - _user_role in ['Administrator', 'Operator', 'ReadOnly']
      register: standard_role_update
      tags: [role_management, standard]

    - name: Display PowerUser role update result
      ansible.builtin.debug:
        msg: 
          - "{{ custom_role_name | default('CustomRole') }} updated successfully with PowerUser privileges"
          - "Role privileges: RemoteConsoleAndVirtualMediaAccess, RemoteServerPowerRestartAccess"
          - "User assigned to {{ custom_role_name | default('CustomRole') }}: {{ 'Success' if (user_role_assignment is defined and user_role_assignment is succeeded) else 'Pending' }}"
      when: 
        - _user_action != 'delete'
        - _user_role == "PowerUser"
        - poweruser_role_update is defined
        - poweruser_role_update is succeeded
      tags: [role_management, poweruser]

    - name: Display standard role update result
      ansible.builtin.debug:
        msg: "{{ _user_role }} role updated successfully"
      when: 
        - _user_action != 'delete'
        - standard_role_update is defined
        - standard_role_update is succeeded
      tags: [role_management, standard]

    - name: Display operation summary
      ansible.builtin.debug:
        msg: 
          - "BMC User Management Operation Completed"
          - "Action: {{ _user_action }}"
          - "Target User: {{ _target_username }}"
          - "Account Slot: {{ account_slot_number | default(target_user_info.id | default('Unknown')) }}"
          - "User Role: {{ _user_role }}"
          - "Custom Role: {{ custom_role_name | default('Not applicable') if _user_role == 'PowerUser' else 'Not used' }}"
          - "Role Update: {{ 'Success' if ((poweruser_role_update is defined and poweruser_role_update is succeeded) or (standard_role_update is defined and standard_role_update is succeeded)) else 'Not performed' }}"
          - "Status: {{ 'Success' if ((create_user_result is defined and create_user_result is succeeded) or (update_password_result is defined and update_password_result is succeeded) or (delete_user_result is defined and delete_user_result is succeeded)) else 'Unknown' }}"
      when: _user_action in ['create', 'update_password', 'delete']
      tags: [always, summary] 